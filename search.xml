<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CORS跨域请求[简单请求与复杂请求]</title>
    <url>/2023/09/15/CORS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%5B%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%A4%8D%E6%9D%82%E8%AF%B7%E6%B1%82%5D/</url>
    <content><![CDATA[<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是GET以外的 HTTP 请求，或者搭配某些 MIME 类型的POST请求），浏览器必须首先使用 OPTIONS方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。<br>众所周知，在以前，跨域可以采用代理、JSONP等方式，而在现代浏览器面前，这些终将成被摒弃，因为有了CORS。<br>CORS可以分成两种：<br>简单请求<br>get post head<br>复杂请求<br>● 用到了 PUT、DELETE 等请求方法<br>● Content-Type的值是上述三种以外的<br>值	描述<br>text&#x2F;plain 	纯文本格式<br>multipart&#x2F;form-data	需要在表单中进行文件上传时，就需要使用该格式<br>● application&#x2F;x-www-form-urlencoded ： <form encType=””>	中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）<br>● 用到了自定义 header<br>在发送真正的请求前, 会先发送一个方法为OPTIONS的预请求(preflight request), 用于试探服务端是否能接受真正的请求，如果options获得的回应是拒绝性质的，比如404\403\500等http状态，就会停止post、put等请求的发出。<br>Access-Control-Allow-Origin:* &#x2F;&#x2F; 如果只是针对某一个请求源进行设置的话，可以设置为具体的值 Access-Control-Allow-Origin: &#x2F;&#x2F; 例如 ‘<a href="http://www.***.com/">http://www.***.com</a>‘</p>
]]></content>
      <categories>
        <category>面试题</category>
        <category>网络</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo博客出现Cannot GET/xxx错误</title>
    <url>/2023/09/16/Hexo%E5%8D%9A%E5%AE%A2%E5%87%BA%E7%8E%B0Cannot-GET-xxx%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>在Hexo博客中，出现Cannot GET&#x2F;xxx错误便意味着xxx文件未被找到。Cannot GET&#x2F;xxx错误本质是hexo server返回的一个404错误。</p>
<p>因此，排查方式如下：</p>
<ol>
<li><p>判断public目录下xxx文件是否存在。<br> （我的错误是 Cannot GET &#x2F;，因此在public目录下寻找index.html是否存在。）</p>
</li>
<li><p>如果说index.html不存在，那么执行hexo c，hexo g重新生成一次，回到步骤1。</p>
</li>
<li><p>步骤2执行完后index.html仍不存在，执行npm audit fix，查看是否少了什么组件，通过npm install hexo-xxx-xxx 安装即可。<br> （我的hexo缺少了hexo-generator-index组件，因此执行npm install hexo-generator-index即可）</p>
</li>
<li><p>步骤3完成之后，执行hexo c，hexo g重新生成静态文件。</p>
</li>
<li><p>仍然有问题，请再参考此文：<a href="https://www.cnblogs.com/Sroot/p/6305938.html">https://www.cnblogs.com/Sroot/p/6305938.html</a></p>
</li>
<li><p>如果依旧解决不了你的问题，请私信我。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2023/09/15/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .	//暂存所有修改</span><br><span class="line">git add  aa.txt //暂存某个文件</span><br><span class="line">git status //查看文件状态是否在暂存区</span><br><span class="line">git reset HEAD .gitignore //撤回暂存区</span><br><span class="line">git commit：// 提交命令</span><br><span class="line">git push //提交到远程仓库</span><br><span class="line">git rm &lt;file&gt; //删除未暂存的文件</span><br><span class="line">git rm -f &lt;file&gt; 删除已暂存的文件</span><br><span class="line">git rm --cached aa.txt 删除已暂存文件，还保留在工作区</span><br><span class="line">git branch 	查看分支</span><br><span class="line">git checkout 分支 切换分支</span><br><span class="line">git checkout -b 创建并切换到目的分支</span><br><span class="line">git branch -d branchname 删除分支</span><br><span class="line">git merge branchname 合并分支</span><br><span class="line">git push --set-upstream origin test2 把本地分支推送到远程仓库</span><br><span class="line">git tag v1.0 打标签</span><br><span class="line">git tag 查看标签，版本</span><br></pre></td></tr></table></figure>
<h2 id="git撤回远程仓库的推送"><a href="#git撤回远程仓库的推送" class="headerlink" title="git撤回远程仓库的推送"></a>git撤回远程仓库的推送</h2><ol>
<li><p>撤回远程仓库的push</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --soft 3bbf8cfa5f545cf74134a16323df35933a9e74df</span><br></pre></td></tr></table></figure>
</li>
<li><p>远程仓库恢复之前的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin test1 --force</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="git合并分支的方法"><a href="#git合并分支的方法" class="headerlink" title="git合并分支的方法"></a>git合并分支的方法</h2><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><h3 id="将其他分支的某个提交合并到当前分支"><a href="#将其他分支的某个提交合并到当前分支" class="headerlink" title="将其他分支的某个提交合并到当前分支"></a>将其他分支的某个提交合并到当前分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git cherry-pick d4af0cb1a2a9136c1219bfa4e83187fcbd9bd1ab</span><br></pre></td></tr></table></figure>
<p>连续合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// commitidA的提交时间必须要早于commitidB</span><br><span class="line">// 这种提交不会包含commitid-A本身</span><br><span class="line"></span><br><span class="line">git cherry-pick commitidA..commitidB</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">//如果想包含commtidA也是可以的</span><br><span class="line">git cherry-pick commitidA..commitid B</span><br><span class="line">git push</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line">$ git rebase master</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure>
<h2 id="git撤回commit"><a href="#git撤回commit" class="headerlink" title="git撤回commit"></a>git撤回commit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>windows11问题</title>
    <url>/2023/09/14/windows11%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="win11-保存文件为什么显示：你没有权限在此-位置保存文件，请与管理员联系以获取相关权限"><a href="#win11-保存文件为什么显示：你没有权限在此-位置保存文件，请与管理员联系以获取相关权限" class="headerlink" title="win11 保存文件为什么显示：你没有权限在此 位置保存文件，请与管理员联系以获取相关权限"></a>win11 保存文件为什么显示：你没有权限在此 位置保存文件，请与管理员联系以获取相关权限</h2><p><a href="https://www.cnblogs.com/mxnote/articles/17143123.html">https://www.cnblogs.com/mxnote/articles/17143123.html</a></p>
<h2 id="解决-win10-找不到文件-gpedit-msc"><a href="#解决-win10-找不到文件-gpedit-msc" class="headerlink" title="解决 win10 找不到文件 gpedit.msc"></a>解决 win10 找不到文件 gpedit.msc</h2><p><strong>gpedit.msc 是常用到的一种命令，在运行里输入</strong>gpedit.msc 命令以后<strong>可以打开本地策略组编辑器，但是有的电脑输入该命令以后确提示找不到如下图，如个别的</strong>win10 家庭版</p>
<p><strong>解决方法：</strong></p>
<p>**1.**打开记事本，输入以下代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line"></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line"></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line"></span><br><span class="line">for /f %%i in (&#x27;findstr /i . List.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;C:\Windows\servicing\Packages\%%i&quot;</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>右键另存为.bat 文件，然后右键打开运行。</p>
]]></content>
      <categories>
        <category>电脑</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>react面试题汇总</title>
    <url>/2023/09/15/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p><a href="https://vue3js.cn/interview/React/React%20Hooks.html#%E4%BA%8C%E3%80%81%E6%9C%89%E5%93%AA%E4%BA%9B">面试题汇总</a></p>
<h2 id="react是什么"><a href="#react是什么" class="headerlink" title="react是什么"></a>react是什么</h2><p>React，用于构建用户界面的 JavaScript 库，只提供了 UI 层面的解决方案<br>遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效<br>使用虚拟 DOM 来有效地操作 DOM，遵循从高阶组件到低阶组件的单向数据流<br>帮助我们将界面成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面<br>react 类组件使用一个名为 render() 的方法或者函数组件return，接收输入的数据并返回需要展示的内容。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>虚拟dom</li>
<li>jsx语法</li>
<li>单向数据绑定</li>
<li>声明式编程</li>
<li>组件化 可维护 可复用 可组合</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>高效灵活</li>
<li>声明式的设计，简单使用</li>
<li>组件式开发，提高代码复用率</li>
<li>单向响应的数据流会比双向绑定的更安全，速度更快</li>
</ul>
<h2 id="说说对Fiber架构的理解？解决了什么问题？"><a href="#说说对Fiber架构的理解？解决了什么问题？" class="headerlink" title="说说对Fiber架构的理解？解决了什么问题？"></a>说说对Fiber架构的理解？解决了什么问题？</h2><p>JavaScript引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待<br>如果 JavaScript 线程长时间地占用了主线程，那么渲染层面的更新就不得不长时间地等待，界面长时间不更新，会导致页面响应度变差，用户可能会感觉到卡顿<br>Fiber把渲染更新过程拆分成多个子任务，每次只做一小部分，做完看是否还有剩余时间，如果有继续下一个任务；如果没有，挂起当前任务，将时间控制权交给主线程，等主线程不忙的时候在继续执行<br>即可以中断与恢复，恢复后也可以复用之前的中间状态，并给不同的任务赋予不同的优先级，其中每个任务更新单元为 React Element 对应的 Fiber节点</p>
<ul>
<li>子任务</li>
<li>中断和恢复</li>
<li>优先级</li>
</ul>
<h2 id="说说对React中类组件和函数组件的理解？有什么区别？"><a href="#说说对React中类组件和函数组件的理解？有什么区别？" class="headerlink" title="说说对React中类组件和函数组件的理解？有什么区别？"></a>说说对React中类组件和函数组件的理解？有什么区别？</h2><p><a href="https://vue3js.cn/interview/React/class_function%20component.html#%E4%BA%8C%E3%80%81%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6">说说对React中类组件和函数组件的理解？有什么区别？</a></p>
<ul>
<li>编写方式</li>
<li>状态管理</li>
<li>生命周期</li>
<li>调用方式 </li>
<li>获取值的方式不同</li>
</ul>
<h2 id="说说React生命周期有哪些不同的阶段？每个阶段对应的方法是？"><a href="#说说React生命周期有哪些不同的阶段？每个阶段对应的方法是？" class="headerlink" title="说说React生命周期有哪些不同的阶段？每个阶段对应的方法是？"></a>说说React生命周期有哪些不同的阶段？每个阶段对应的方法是？</h2><h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><ul>
<li>constructor 定义状态，更改函数this指向，方便调用。</li>
<li>getDerivedStateFromProps 从更新后的props中获取State，它让组件在 props 发生改变时更新它自身的内部 state。 返回null表示state不变化，返回新的state表示更新state</li>
<li>render 渲染dom结构</li>
<li>componentDidMount 异步请求，初始调用或者执行一些函数</li>
</ul>
<h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h3><ul>
<li>getDerivedStateFromProps 它让组件在 props 发生改变时更新它自身的内部 state。 返回null表示state不变化，返回新的state</li>
<li>shouldComponentUpdate 用于告知组件本身基于当前的props和state是否需要重新渲染组件，默认情况返回true</li>
<li>render 类组件必须实现的方法，用于渲染DOM结构，可以访问组件state与prop属性</li>
<li>getSnapshotBeforeUpdate：该周期函数在render后执行，执行之时DOM元素还没有被更新，目的在于获取组件更新前的一些信息，比如组件的滚动位置之类的，在组件更新后可以根据这些信息恢复一些UI视觉上的状态</li>
<li>componentDidUpdate 可以根据前后的props和state的变化做相应的操作，如获取数据，修改DOM样式等</li>
</ul>
<p>卸载阶段：</p>
<ul>
<li>componentWillUnmount:此方法用于组件卸载前，清理一些注册是监听事件，或者取消订阅的网络请求等,一旦一个组件实例被卸载，其不会被再次挂载，而只可能是被重新创建</li>
</ul>
<h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><p>JSX 就是为了简化直接调用 React.createElement() 方法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vDom = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>，</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">&#x27;hClass&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;hId&#x27;</span> &#125;,</span><br><span class="line">  <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p><a href="https://vue3js.cn/interview/React/Binding%20events.html#%E4%BA%8C%E3%80%81%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A">https://vue3js.cn/interview/React/Binding events.html#二、如何绑定</a><br>为了解决上面正确输出this的问题，常见的绑定方式有如下：<br>render方法中使用bind<br>render方法中使用箭头函数<br>constructor中bind<br>定义阶段使用箭头函数绑定</p>
<h2 id="说说你对React中虚拟dom的理解？"><a href="#说说你对React中虚拟dom的理解？" class="headerlink" title="说说你对React中虚拟dom的理解？"></a>说说你对React中虚拟dom的理解？</h2><p>真实 DOM 的优势：</p>
<ul>
<li>易用</li>
</ul>
<p>缺点：</p>
<ul>
<li>效率低，解析速度慢，内存占用量过高</li>
<li>性能差：频繁操作真实 DOM，易于导致重绘与回流</li>
<li>使用虚拟 DOM 的优势如下：</li>
</ul>
<p>简单方便：如果使用手动操作真实 DOM 来完成页面，繁琐又容易出错，在大规模应用下维护起来也很困难<br>性能方面：使用 Virtual DOM，能够有效避免真实 DOM 数频繁更新，减少多次引起重绘与回流，提高性能<br>跨平台：React 借助虚拟 DOM，带来了跨平台的能力，一套代码多端运行<br>缺点：<br>在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化<br>首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，速度比正常稍慢</p>
<h2 id="state和props的区别"><a href="#state和props的区别" class="headerlink" title="state和props的区别"></a>state和props的区别</h2><p>三、区别<br>相同点：<br>两者都是 JavaScript 对象<br>两者都是用于保存信息<br>props 和 state 都能触发渲染更新<br>区别：<br>props 是外部传递给组件的，而 state 是在组件内被组件自己管理的，一般在 constructor 中初始化<br>props 在组件内部是不可修改的，但 state 在组件内部可以进行修改<br>state 是多变的、可以修改</p>
<h2 id="setState执行机制？"><a href="#setState执行机制？" class="headerlink" title="setState执行机制？"></a>setState执行机制？</h2><p>在react类组件的状态需要通过setState进行更改，在不同场景下对应不同的执行顺序：</p>
<ul>
<li>在组件生命周期或React合成事件中，setState是异步</li>
<li>在setTimeout或者原生dom事件中，setState是同步</li>
</ul>
<p>当我们批量更改state的值的时候，react内部会将其进行覆盖，只取最后一次的执行结果<br>当需要下一个state依赖当前state的时候，则可以在setState中传递一个回调函数进行下次更新</p>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a><a href="https://vue3js.cn/interview/React/communication.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88">组件通信</a></h2><p>父&#x3D;&gt;后代</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> <span class="title class_">PriceContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line"> &lt;<span class="title class_">PriceContext</span>.<span class="property">Provider</span> value=&#123;<span class="number">100</span>&#125;&gt;</span><br><span class="line">&lt;/<span class="title class_">PriceContext</span>.<span class="property">Provider</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = <span class="title class_">PriceContext</span>;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> price = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">    <span class="comment">/* 基于这个值进行渲染工作 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">PriceContext</span>.<span class="property">Consumer</span>&gt;</span><br><span class="line">    &#123; <span class="comment">/*这里是一个函数*/</span> &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="params">price</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>price：&#123;price&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/<span class="title class_">PriceContext</span>.<span class="property">Consumer</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="受控组件与非受控组件区别"><a href="#受控组件与非受控组件区别" class="headerlink" title="受控组件与非受控组件区别"></a><a href="https://vue3js.cn/interview/React/controlled_Uncontrolled.html#%E4%B8%89%E3%80%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">受控组件与非受控组件区别</a></h2><blockquote>
<p>表单数据由DOM本身处理。即不受setState()的控制，与传统的HTML表单输入相似，input输入值即显示最新值（使用 ref从DOM获取表单值）</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;A name was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">input</span>.<span class="property">value</span>);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Name:</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;(input)</span> =&gt;</span> this.input = input&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><p>1、Hook是React 16.8.0版本增加的新特性&#x2F;新语法，可以让你在函数组件中使用 state 以及其他的 React 特性<br>常见的Hook:<br>2、useState：跟类组件中state类似，方便我们定义初始化的数据，接收两个参数，一个是初始化数据，另一个是修改数据的方法<br>3、useEffect：副作用函数，只有使用之后，才会产生副作用，他接受两个参数，一个是函数，另一个是要监听的数据，可以是[]，表示只执行一次，也可以传参，传参之后只要当我们的数据发生变化时才会触发，如果不写，那么发生一次变化就会执行一次<br>4、useMemo：数据缓存，当我们进行组件通信时，如果我们父组件中的数据发生变化，那么我们的子组件也会随着进行更新，不管我们更新的数据是否跟我们的子组件的数据有关系，他都会进行更新操作，这时候，就会存在更新性能的浪费，我们可以使用usememo来进行缓存，减少不必要的更新操作，他的缓存的参数是一个字符串，如果是一个函数的话，那么我们的usememo就会失效，这时候就需要使用useCallback进行数据的缓存操作<br>5、useRef：可以监听我们的输入框数据的变化，获取输入框中的值<br>自定义hooks组件<br><a href="https://vue3js.cn/interview/React/React%20Router.html#%E4%BA%8C%E3%80%81%E6%9C%89%E5%93%AA%E4%BA%9B">面试官：说说你对React Router的理解？常用的Router组件有哪些？ | web前端面试 - 面试官系列</a></p>
<h2 id="key作用"><a href="#key作用" class="headerlink" title="key作用"></a>key作用</h2><p>元素key属性的作用是用于判断元素是新创建的还是被移动的元素，从而减少不必要的元素渲染</p>
<ol>
<li>key 应该是唯一的</li>
<li>key不要使用随机值（随机数在下一次 render 时，会重新生成一个数字）</li>
<li>使用 index 作为 key值，对性能没有优化</li>
</ol>
<h2 id="redux工作流"><a href="#redux工作流" class="headerlink" title="redux工作流"></a>redux工作流</h2><p>流程：view通过dispatch一个action给store来改变数据，store接收到action后传递一个preState和action给reducer，reducer返回一个newState，store接收到后进行state的更改，最后由subscribe()获取新的state，React更新组件。<br>redux的基本原则：</p>
<ul>
<li>唯一数据源——Store</li>
<li>不可变性——Action</li>
<li>通过纯函数改变state——Reducer</li>
</ul>
<p>唯一数据源： redux只有一个store来存状态，一个store里可以有很多个state，每个state对应一个view。</p>
<h2 id="说说-React-性能优化的手段有哪些？"><a href="#说说-React-性能优化的手段有哪些？" class="headerlink" title="说说 React 性能优化的手段有哪些？"></a>说说 React 性能优化的手段有哪些？</h2><ul>
<li>避免使用内联函数</li>
<li>使用 React Fragments 避免额外标记</li>
<li>使用 Immutable</li>
<li>懒加载组件</li>
<li>事件绑定方式</li>
<li>服务端渲染<blockquote>
<p>采用服务端渲染端方式，可以使用户更快的看到渲染完成的页面<br>服务端渲染，需要起一个node服务，可以使用express、koa等，调用react的renderToString方法，将根组件渲染成字符串，再输出到响应中</p>
</blockquote>
</li>
</ul>
<h2 id="react常见的性能优化可以分成三个层面："><a href="#react常见的性能优化可以分成三个层面：" class="headerlink" title="react常见的性能优化可以分成三个层面："></a>react常见的性能优化可以分成三个层面：</h2><h3 id="代码层面"><a href="#代码层面" class="headerlink" title="代码层面"></a>代码层面</h3><ul>
<li>循环遍历的组件加上唯一标识的key</li>
<li>不要使用内联函数，则每次调用render函数时都会创建一个新的函数实例，</li>
<li>使用 React Fragments 避免额外标记，或者使用空标签</li>
</ul>
<h3 id="工程层面"><a href="#工程层面" class="headerlink" title="工程层面"></a>工程层面</h3><ul>
<li>懒加载组件</li>
</ul>
<h3 id="框架机制层面"><a href="#框架机制层面" class="headerlink" title="框架机制层面"></a>框架机制层面</h3><h2 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h2><ul>
<li>React白屏优化主要指的是减少首次渲染的时间，让用户能尽快看到页面的内容。可以采用以下方法进行优化：</li>
</ul>
<ol>
<li>Server-side rendering: 将页面的首屏渲染在服务器端完成，能提高首屏加载速度。</li>
<li>Lazy Loading: 懒加载组件或图片，只在需要时才加载。</li>
<li>优化资源，如图片压缩和代码压缩。优化网络请求</li>
<li>Code Splitting: 将代码拆分成多个小块，只在需要时加载。</li>
</ol>
<h2 id="React构建组件的方式有哪些？区别？"><a href="#React构建组件的方式有哪些？区别？" class="headerlink" title="React构建组件的方式有哪些？区别？"></a>React构建组件的方式有哪些？区别？</h2><ol>
<li>函数创建</li>
<li>继承 React.Component 创建</li>
</ol>
<h2 id="循环使用key"><a href="#循环使用key" class="headerlink" title="循环使用key"></a>循环使用key</h2><ol>
<li>尽量使用id，不要用index</li>
</ol>
<h2 id="使用-Fragment-减少层级"><a href="#使用-Fragment-减少层级" class="headerlink" title="使用 Fragment 减少层级"></a>使用 Fragment 减少层级</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="react项目亮点"><a href="#react项目亮点" class="headerlink" title="react项目亮点"></a>react项目亮点</h2><ol>
<li>日期组件封装</li>
<li>自定义请求hooks,封装一些常规接口</li>
<li>图表组件封装，图表自定义</li>
<li>路由跳转问题 ，使用history.replace</li>
<li>数据太多前端分页</li>
</ol>
]]></content>
      <categories>
        <category>面试题</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>git-stash用法小结</title>
    <url>/2023/09/15/git-stash%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="git-stash用法小结"><a href="#git-stash用法小结" class="headerlink" title="git-stash用法小结"></a>git-stash用法小结</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>只提交部分文件到远程仓库。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">git add demo.html // 提交到暂存区</span><br><span class="line">git stash -u -k  // 忽略其他修改，关键一步</span><br><span class="line">git commit -m <span class="string">&#x27;修改演示文件&#x27;</span> // 提交暂存区</span><br><span class="line">git pull // 拉取合并</span><br><span class="line">git <span class="keyword">push</span> origin master // 推到远程仓库</span><br><span class="line">git stash <span class="keyword">pop</span> // 恢复之前忽略的文件（非常重要的一步）</span><br></pre></td></tr></table></figure>



<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="1-stash当前修改"><a href="#1-stash当前修改" class="headerlink" title="1. stash当前修改"></a>1. stash当前修改</h3><p><code>git stash</code>会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录。<br>比如下面的中间状态，通过<code>git stash</code>命令推送一个新的储藏，当前的工作目录就干净了。</p>
<p>实际应用中推荐给每个stash加一个message，用于记录版本，使用<code>git stash save</code>取代<code>git stash</code>命令。示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash save <span class="string">&quot;test-cmd-stash&quot;</span></span><br><span class="line">Saved working directory and index state On autoswitch: test-cmd-stash</span><br><span class="line">HEAD 现在位于 296e8d4 remove unnecessary postion reset <span class="keyword">in</span> onResume <span class="keyword">function</span></span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: On autoswitch: test-cmd-stash</span><br></pre></td></tr></table></figure>

<h3 id="2-查看存储"><a href="#2-查看存储" class="headerlink" title="2.查看存储"></a>2.查看存储</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<h3 id="3-重新应用缓存的stash"><a href="#3-重新应用缓存的stash" class="headerlink" title="3. 重新应用缓存的stash"></a>3. 重新应用缓存的stash</h3><p>可以通过<code>git stash pop</code>命令恢复之前缓存的工作目录，输出如下</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">$ git stash <span class="keyword">pop</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line"></span><br><span class="line">    new file:   style.css</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:</span><br><span class="line"></span><br><span class="line">    modified:   index.html</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (<span class="number">32</span>b3aa1d185dfe6d57b3c3cc3b32cbf3e380cc6a)</span><br></pre></td></tr></table></figure>

<p>在使用<code>git stash apply</code>命令时可以通过名字指定使用哪个stash，默认使用最近的stash（即stash@{0}）。</p>
<h3 id="4-移除stash"><a href="#4-移除stash" class="headerlink" title="4. 移除stash"></a>4. 移除stash</h3><p>可以使用<code>git stash drop</code>命令，后面可以跟着stash名字。下面是一个示例：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: <span class="number">04</span>9d078 added the <span class="keyword">index</span> file</span><br><span class="line">stash@&#123;1&#125;: WIP on master: c264051 Revert <span class="string">&quot;added file_size&quot;</span></span><br><span class="line">stash@&#123;2&#125;: WIP on master: <span class="number">21</span>d80a5 added number to <span class="keyword">log</span></span><br><span class="line">$ git stash drop stash@&#123;0&#125;</span><br><span class="line">Dropped stash@&#123;0&#125; (<span class="number">364</span>e91f3f268f0900bc3ee613f9f733e82aaed43)</span><br></pre></td></tr></table></figure>

<p>或者使用<code>git stash clear</code>命令，删除所有缓存的stash。</p>
<h3 id="5-从stash创建分支"><a href="#5-从stash创建分支" class="headerlink" title="5. 从stash创建分支"></a>5. 从stash创建分支</h3><p>如果你储藏了一些工作，暂时不去理会，然后继续在你储藏工作的分支上工作，你在重新应用工作时可能会碰到一些问题。如果尝试应用的变更是针对一个你那之后修改过的文件，你会碰到一个归并冲突并且必须去化解它。如果你想用更方便的方法来重新检验你储藏的变更，你可以运行 git stash branch，这会创建一个新的分支，检出你储藏工作时的所处的提交，重新应用你的工作，如果成功，将会丢弃储藏。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash branch testchanges</span></span><br><span class="line">Switched to a new branch &quot;testchanges&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">On branch testchanges</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Changes to be committed:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#      modified:   index.html</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Changes not staged for commit:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#      modified:   lib/simplegit.rb</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">Dropped refs/stash@&#123;0&#125; (f0dfc4d5dc332d1cee34a634182e168c4efc3359)</span></span><br></pre></td></tr></table></figure>

<p>这是一个很棒的捷径来恢复储藏的工作然后在新的分支上继续当时的工作。</p>
<h3 id="7-暂存未跟踪或忽略的文件"><a href="#7-暂存未跟踪或忽略的文件" class="headerlink" title="7. 暂存未跟踪或忽略的文件"></a>7. 暂存未跟踪或忽略的文件</h3><p>默认情况下，<code>git stash</code>会缓存下列文件：</p>
<ul>
<li>添加到暂存区的修改（staged changes）</li>
<li>Git跟踪的但并未添加到暂存区的修改（unstaged changes）</li>
</ul>
<p>但不会缓存一下文件：</p>
<ul>
<li>在工作目录中新的文件（untracked files）</li>
<li>被忽略的文件（ignored files）</li>
</ul>
<p><code>git stash</code>命令提供了参数用于缓存上面两种类型的文件。使用<code>-u</code>或者<code>--include-untracked</code>可以stash untracked文件。使用<code>-a</code>或者<code>--all</code>命令可以stash当前目录下的所有修改。</p>
<p>至于<code>git stash</code>的其他命令建议参考Git manual。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>git提供的工具很多，恰好用到就可以深入了解下。更方便的开发与工作的。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
